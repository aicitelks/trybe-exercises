/** Suponha que vocÃª quer escrever um programa em JavaScript que faz uma requisiÃ§Ã£o para a API de dad jokes . Assim sendo, vocÃª escreve o seguinte cÃ³digo: */// ./dipExample.js

const fetch = require('node-fetch');

const url = 'https://icanhazdadjoke.com';

const requestWithFetch = () => {
  fetch(url, {
    headers: new fetch.Headers({
      Accept: 'application/json',
    }),
  })
    .then((response) => response.json())
    .then((data) => console.log(data.joke))
    .catch((err) => console.log(err));
};

const getJokes = (numberOfJokes) => {
  for (let i = 0; i < numberOfJokes; i += 1) requestWithFetch();
};

getJokes(5);

module.exports = { getJokes };

/**
 *  Problema resolvido! Mas agora vamos pensar na questÃ£o que estÃ¡ nos acompanhando por todo o dia de hoje: como podemos reusar esse cÃ³digo no futuro para outros contextos sem alterar o cÃ³digo que jÃ¡ existe? Olhe para esse nosso exemplo: aÃ­, estamos usando o fetch para fazer uma requisiÃ§Ã£o Ã  API. A funÃ§Ã£o depende do fetch para funcionar. O fetch , portanto, Ã© uma dependÃªncia da funÃ§Ã£o! E o que seria, entÃ£o, a inversÃ£o de dependÃªncia? Conforme foi dito lÃ¡ em cima

    Quem usa uma funÃ§Ã£o deve ser capaz de determinar quais outros mÃ³dulos ela usa em sua lÃ³gica.

Em outras palavras, "quem usa decide como se usa". Como assim? Imagine que, no futuro, decide-se abolir o uso de fetch no seu projeto em favor do axios . NÃ£o queremos alterar o nosso cÃ³digo antigo (vai que ele quebra ðŸ˜¬), mas cÃ³digo novo deve vir com a API nova.
SÃ³ que nÃ³s queremos usar a nossa funÃ§Ã£o getJokes numa funcionalidade nova que estamos fazendo, mas sem utilizar o fetch ! Como fazemos? 

Veja no dipExemple2.js
 */